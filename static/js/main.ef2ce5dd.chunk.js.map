{"version":3,"sources":["NavBar.js","HomePage.js","UserProfile.js","ActualUser.js","Match.js","Preferences.js","Success.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","HomePage","src","height","type","Button","variant","size","UserProfile","props","onC","e","setState","target","name","value","submit","preventDefault","localStorage","setItem","JSON","stringify","state","savedProfile","parse","getItem","nomePessoa","bornLocation","species","mass","affiliation","picture","Container","Form","onSubmit","this","Group","Label","Control","onChange","autoComplete","React","Component","ActualUser","console","log","Match","getPersons","fetch","then","response","json","result","starWarsPersons","isLoading","isError","findMatches","error","filteredResults","window","myPreferences","favAffiliation","filter","person","affiliations","includes","matches","style","fontSize","display","flexWrap","marginLeft","map","element","Card","width","margin","Img","image","Body","backgroundColor","Title","Text","color","item","Preferences","selectSpecies","eventKey","favSpecies","selectAffiliation","selectHomeworld","favHomeworld","favMass","Dropdown","onSelect","Menu","Set","reduce","acc","elem","concat","sort","aff","Item","Success","class","App","basename","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef2ce5dd.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nfunction NavBar() {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"#/\">IMPERIAL SPARK</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#/\">Home</Nav.Link>\n                    <Nav.Link href=\"#my-profile\">My profile</Nav.Link>\n                    <Nav.Link href=\"#my-preferences\">Your Preferences</Nav.Link>\n                    <Nav.Link href=\"#match\">Find a Match</Nav.Link>\n                    \n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n\n\nexport default NavBar;\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\n\n\n\nfunction HomePage() {\n  return (\n    <div className=\"Homepage\">\n      <h1>Make the first move!</h1>\n      <img src='https://i.pinimg.com/originals/39/1e/18/391e18a819289cb0fdf8d856ccb2d0fe.jpg' height='300px'></img>\n      <p> Don't be shy... you never know where love is...</p>\n\n      <>\n        \n        <style type=\"text/css\">\n          {`\n    .btn-flat {\n      background-color: purple;\n      color: white;\n    }\n\n    .btn-xxl {\n      padding: 1rem 1.5rem;\n      font-size: 1.5rem;\n    }\n    `}\n        </style>\n\n        <Button href='#my-profile' variant=\"flat\" size=\"xxl\" >\n          Create your Profile\n  </Button>\n      </>\n\n\n    </div>\n  );\n}\n\n\n\n\n\nexport default HomePage;\n\n\n\n","import React from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\n\n\nclass UserProfile extends React.Component {\n    constructor(props) {\n        super(props);\n\n        var savedProfile = JSON.parse(localStorage.getItem('profile'));\n\n        if (savedProfile === null) {\n            this.state = {\n                nomePessoa: '',\n                bornLocation: '',\n                species: '',\n                mass: '',\n                affiliation: '',\n                picture: '',\n            }\n        } else {\n            this.state = {\n                nomePessoa: savedProfile.nomePessoa || '',\n                bornLocation: savedProfile.bornLocation || '',\n                species: savedProfile.species || '',\n                mass: savedProfile.mass || '',\n                affiliation: savedProfile.affiliation || '',\n                picture: savedProfile.picture || '',\n            }\n        }\n\n\n    }\n\n    onC = (e) => {\n        // console.log(e.target.name); // Retorna o atributo \"name\"\n        //console.log(e.target.id);   // Retorna o atributo \"id\"\n        //  console.log(e.target.type); // Retorna o atributo \"type\"\n        //  console.log(e.target.value); // Retorna o atributo \"value\" --> o que o utilizador introduziu\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n\n        localStorage.setItem('profile', JSON.stringify(this.state));\n        \n    }\n\n\n    render() {\n        // console.log(this.state)\n        return (\n            <Container className='userprofile'>\n                <h1>YOUR PROFILE</h1>\n                <Form onSubmit={this.submit}>\n                    <Form.Group>\n                        <Form.Label>Name:</Form.Label>\n                        <Form.Control type='text' id='name' name='nomePessoa' onChange={this.onC} value={this.state.nomePessoa} autoComplete=\"off\" />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Born Location:</Form.Label>\n                        <Form.Control type='text' id='bornLocation' name='bornLocation' onChange={this.onC} value={this.state.bornLocation} />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Species:</Form.Label>\n                        <Form.Control type='text' id='species' name='species' onChange={this.onC} value={this.state.species} />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Mass:</Form.Label>\n                        <Form.Control type='number' id='mass' name='mass' onChange={this.onC} value={this.state.mass} />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Afilliation:</Form.Label>\n                        <Form.Control type='text' id='affiliation' name='affiliation' onChange={this.onC} value={this.state.affiliation} />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Picture:</Form.Label>\n                        <Form.Control type='file' id='picture' name='picture' />\n                    </Form.Group>\n                    <Button href='#my-preferences' variant=\"primary\" type=\"submit\">Submit</Button>\n                </Form>\n            </Container>\n        );\n    }\n}\n\nexport default UserProfile;","import React from 'react';\n\n\nclass ActualUser extends React.Component {\n    constructor(props) {\n        super(props);\n\n        var savedProfile = JSON.parse(localStorage.getItem('profile'));\n\n        if (savedProfile === null) {\n            this.state = {\n                nomePessoa: '',\n                bornLocation: '',\n                species: '',\n                mass: '',\n                affiliation: '',\n                picture: '',\n            }\n        } else {\n            this.state = {\n                nomePessoa:savedProfile.nomePessoa,\n                bornLocation: savedProfile.bornLocation,\n                species: savedProfile.species,\n                mass: savedProfile.mass,\n                affiliation: savedProfile.affiliation,\n                picture: savedProfile.picture,\n            }\n        }\n\n\n    }\n    render() {\n        console.log(this.savedProfile);\n        return (\n            <div>\n                <h1>{this.state.nomePessoa}</h1>\n            </div>\n        )\n    }\n}\n\nexport default ActualUser;","import React from 'react';\nimport { Component } from 'react';\nimport ActualUser from './ActualUser.js';\nimport { Button,Card } from 'react-bootstrap';\n\nclass Match extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            starWarsPersons: [],\n            matches: [],\n            isLoading: true,\n            isError: false\n        }\n    }\n\n    componentDidMount() {\n        console.log(window.myPreferences);\n\n        this.getPersons();\n    }\n\n\n\n    getPersons = () => {\n        fetch('https://melroune.github.io/starwars-api/api/all.json')\n            .then(response => response.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        starWarsPersons: result,\n                        isLoading: false,\n                        isError: false,\n                    }, this.findMatches);\n                },\n                (error) => {\n                    this.setState({\n                        isLoading: false,\n                        isError: true\n                    });\n                }\n            )\n    }\n\n    findMatches = () => {\n        // Find all matches that fit into the criteria\n        // Store it on this.state.matches\n\n\n        let filteredResults;\n\n        // var specie = window.myPreferences.favSpecies;\n        var affiliation = window.myPreferences.favAffiliation;\n        // var homeworld= window.myPreferences.favHomeworld;\n\n        // Mass between 20 and 50\n        // filteredResults = this.state.starWarsPersons.filter(element => {\n        //     return element.mass > 20 && element.mass < 50;\n        // });\n\n        // Filter by specie\n\n        // filteredResults = this.state.starWarsPersons.filter(person => {\n        //     return person.species.includes(specie);\n\n        // });\n\n        // Filter by affiliation\n        filteredResults = this.state.starWarsPersons.filter(person => {\n            return person.affiliations.includes(affiliation);\n        });\n\n        this.setState({\n            matches: filteredResults\n        });\n    }\n\n    render() {\n        console.log(this.state.matches)\n        return (\n            <div className='match'>\n            <div style={{fontSize:'50px'}}>Hello <ActualUser /> you got these options:</div>\n                <div style={{ display: 'flex', flexWrap: 'wrap', marginLeft: '7%'}}>\n               \n                \n                {this.state.matches.map((element) => {\n                     return (\n                    <Card style={{width:'400px', margin:'50px'}}>\n                    <Card.Img variant=\"top\" src={element.image}  />\n                    <Card.Body style={{backgroundColor:'grey',height:'auto'}}>\n                        <Card.Title>Name: {(element.name)}</Card.Title>\n                        <Card.Text style={{color:'white'}}>\n  \n                   \n                        <ul>\n                            \n                            <li>Species: {(element.species)} </li>\n\n                            <li> \n                                    <ul>Affiliations:\n                   \n                                    {\n                                    element.affiliations.map((item) =>\n                                    { return (<li className='affiliations'> {item}</li>) })\n                                    }                                  \n                                \n                                    </ul>                           \n                            </li>\n                            <li>mass: {(element.mass)}kg </li>\n                        </ul>\n                    \n               \n                        </Card.Text>\n                        <Card.Link style={{color:'black'}} href=\"#success\"><Button>Like!</Button></Card.Link>\n                        \n                    </Card.Body>\n                    </Card>) })}\n\n                </div>\n               <Button href='#my-preferences'>Try Again...</Button>\n                </div>\n        )\n    }\n\n\n\n}\n\n\nexport default Match;","import React, { Component } from 'react';\nimport { Dropdown, Button, Container } from 'react-bootstrap';\nimport ActualUser from './ActualUser.js';\n\n\n\nclass Preferences extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            starWarsPersons: [],\n            favSpecies: [],\n            favAffiliation: [],\n            favHomeworld: [],\n            favMass: [],\n\n        }\n    }\n\n    componentDidMount() {\n        this.getPersons();\n        // console.log(this.starWarsPersons)\n    }\n\n    getPersons = () => {\n        fetch('https://melroune.github.io/starwars-api/api/all.json')\n            .then(response => response.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        starWarsPersons: result,\n                        isLoading: false,\n                        isError: false,\n\n                    });\n\n                },\n                (error) => {\n                    this.setState({\n                        isLoading: false,\n                        isError: true\n                    });\n                }\n            )\n    }\n\n    selectSpecies = (eventKey) => {\n        this.setState({\n            favSpecies: eventKey\n        });\n    }\n\n    selectAffiliation = (eventKey) => {\n        this.setState({\n            favAffiliation: eventKey\n        });\n    }\n\n    selectHomeworld = (eventKey) => {\n        this.setState({\n            favHomeworld: eventKey\n        });\n    }\n\n    componentDidUpdate() {\n        window.myPreferences = this.state;\n    }\n\n    render() {\n        // console.log(this.state)\n\n        return (\n            <Container className='preferences'>\n                <h4>Hello <ActualUser /> Choose the Affiliation you prefer:</h4>\n                {/* <div> */}\n                    {/* <Dropdown onSelect={this.selectSpecies}>\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" >\n                            Favorite Species\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu onSelect={this.selectSpecies}>\n                            {[...new Set(this.state.starWarsPersons.map(element => element.species))].sort().map((specie) => (\n                                <Dropdown.Item name='favSpecies' eventKey={specie}>{specie};</Dropdown.Item>\n\n                            ))};\n\n                        </Dropdown.Menu>\n                    </Dropdown> */}\n                    {/* <p className='favspecie'>{this.state.favSpecies}</p> */}\n                {/* </div> */}\n\n                <div>\n                    <Dropdown onSelect={this.selectAffiliation}>\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                            Favorite Affiliation\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu onSelect={this.selectAffiliation}>\n                            {[...new Set(this.state.starWarsPersons\n                                .map(element => element.affiliations)\n                                .reduce((acc, elem) => {\n                                    return acc.concat(elem);\n                                }, []))]\n                                .sort()\n                                .map(aff => (\n                                    <Dropdown.Item name='favAffiliation' eventKey={aff}>{aff};</Dropdown.Item>\n                                ))}\n                        </Dropdown.Menu>\n                    </Dropdown>\n\n                    <p className='favspecie'>{this.state.favAffiliation}</p>\n                </div>\n                {/* <div>\n                    <Dropdown onSelect={this.selectHomeworld}>\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                            Favorite Home World\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu onSelect={this.selectHomeworld}>\n                            {[...new Set(this.state.starWarsPersons.map(element => element.homeworld)\n                                .reduce((acc, elem) => {\n                                    return acc.concat(elem);\n                                }, []))]\n                                .filter(elem => elem !== undefined)\n                                .sort(function (a, b) {\n                                    var nameA = a.toUpperCase(); // ignore upper and lowercase\n                                    var nameB = b.toUpperCase(); // ignore upper and lowercase\n                                    if (nameA < nameB) {\n                                        return -1;\n                                    }\n                                    if (nameA > nameB) {\n                                        return 1;\n                                    }\n\n                                    // names must be equal\n                                    return 0;\n                                }).map((homeworld) => (\n                                    <Dropdown.Item name='favHomeworld' eventKey={homeworld}>{homeworld};</Dropdown.Item>\n                                ))};\n                        </Dropdown.Menu>\n                    </Dropdown>\n                    <p className='favspecie'>{this.state.favHomeworld}</p>\n                </div> */}\n                <Button variant=\"primary\" href='#match' >check your matches</Button>\n            </Container>\n        );\n    }\n}\n\n\nexport default Preferences;","import React from 'react';\nimport './Success.css';\n\n\nfunction Success() {\n  return (\n    <div className=\"success-body\">\n     <div class=\"fade\"></div>\n\n<section class=\"star-wars\">\n  <div class=\"crawl\">\n    <div class=\"title\">\n      <p>Episode IV</p>\n      <h1>A New Hope</h1>\n    </div>\n    \n    <p>The Imperial Love you've found!     \n    A message to your Imperial Love we've sent. A new chapter begins... \n    May the force be with you!</p>\n  </div>\n</section>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from 'react';\nimport './App.css';\nimport NavBar from './NavBar.js';\nimport { Switch, HashRouter, Route } from 'react-router-dom';\nimport HomePage from './HomePage.js';\nimport UserProfile from './UserProfile.js';\nimport Match from './Match.js';\nimport Preferences from './Preferences.js';\nimport Success from './Success.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/StarLove\">\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/my-profile\" component={UserProfile} />\n          <Route exact path=\"/my-preferences\" component={Preferences} />\n          <Route exact path=\"/match\" component={Match} />\n          <Route exact path=\"/success\" component={Success}/>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}